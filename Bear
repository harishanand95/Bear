#!/usr/bin/python
import requests,sys,string
import json
import subprocess
import textwrap
import os
import dbus
import urllib
import dbus

# USE GOOGLE SPEECH API FOR BETTER ACCURACY.
using_google_speech_api = True

bus = dbus.SessionBus()
helloservice = bus.get_object('org.gnome.Shell', '/com/bear/queryInPanel')
hello = helloservice.get_dbus_method('setText', 'com.bear.queryInPanel')
changeColor = helloservice.get_dbus_method('changeColor', 'com.bear.queryInPanel')
voice_to_text = ""

# Reports searches that Bear couldn't understand to Admin.

def Report_to_admin(subject,content):
    return requests.post(
        "https://api.mailgun.net/v3/sandbox993e74db4dc649acb4e25e2f62e1f384.mailgun.org/messages",
        auth=("api", "key-0c4b2144b9585be0660a2ff2de1647f1"),
        data={"from": "Excited User <mailgun@sandbox993e74db4dc649acb4e25e2f62e1f384.mailgun.org>",
              "to": ["harishanand95@gmail.com"],
              "subject": subject,
              "text": content})

# Function to create slide in popup notification. 
# call hello(pop_up_content,<number>,filename)
# <number> can be 0 - Display as pop up
#                 1 - Display as panel notification (only limited content allowed <60)
# As of now <number> -1 is in development phase which creates a pop up with pic.
# Filename - filename of the picture ( NOT WORKING). Just provide "".
# pop_up_content - content to be displayed as part of notification.

def send_to_extension(top_title,Content,filename):
    popup = textwrap.fill(Content,120)
    
    if(len(popup) > 60):
        #print "inside send to extension"
        reply = "\n"; 
        reply += popup;
        if filename != "":
            print "yes filename"+str(filename)
            hello(reply+"    ",-1,filename)
        else:
            print "no filename" +str(filename)
            hello(reply+"    ",0,"")
        call_extension()
    else:
        if popup == "":
            popup = "I dont know.. Try doing an Internet Search!"
            Report_to_admin(str(top_title),popup)
        hello(str(popup + "   "),1,"")

# Function to move the mouse to right top end of the screen
# which creates the pop up notification.

def call_extension():
    s = subprocess.check_output("xdpyinfo | grep dimensions | awk '{print $2}' | awk -Fx '{print $1, $2}'",shell=True) #screen size
    s = s.split()
    subprocess.call(["xdotool","mousemove",str(s[0]),"0"])

# Function to record the voice and send it either to Google Speech API or 
# to Api.ai 's speech recognition.

def record():
    if using_google_speech_api:
        cmd = "rec -c 1 -r 44000 -b 16 /tmp/test.flac gain +10 trim 0 10"
        subprocess.call(cmd.split())
        hello(" . : : .  Google Speech API call in progress  . : : .   ",1,"")
    else:
        cmd = "rec -c 1 -r 16000 -b 16 /tmp/test.wav gain +10 trim 0 10"
        subprocess.call(cmd.split())
        cmd = "sox /tmp/test.wav -n trim 0 1.5 noiseprof speech.noise-profile"
        subprocess.call(cmd.split())
        cmd = "sox /tmp/test.wav /tmp/cleanedtest.wav noisered speech.noise-profile 0.5"
        subprocess.call(cmd.split())
        hello(" . : : .  Api.ai Speech call in progress  . : : .   ",1,"")

# Function to send the recorded voice to Google Speech API    
def google_voice_call():
    cmd = "cd ~/.Bear && node index.js"
    voice_to_text_json = subprocess.check_output(cmd,shell=True)
    if voice_to_text_json[0:9] == "undefined":
        send_to_extension("Error 502 (Server Error)","Error 502 (Server Error).Google Speech API encountered a temporary error and could not complete your request. Please check if you have internet connection. To use Api.ai's speech recognition open /usr/local/bin/Bear file and change using_google_speech_api = True to False","")
        exit
    voice_to_text_json = str(voice_to_text_json[0:-1])
    voice_to_text_json = voice_to_text_json.replace("'","")
    voice_to_text = json.loads(voice_to_text_json)
    if not voice_to_text :
            return 0
    voice_text = voice_to_text[0]["result"][0]["alternative"][0]["transcript"]
    voice_text.encode('ascii','ignore')
    return voice_text

# Function that calls the API.AI voice recogntion engine
# Authorisation and Subscription key is obtained from api.ai. If you want to use your own api.ai account you can provide your keys by creating an account at api.ai.

def api_ai_voice_call():
    subp = subprocess.check_output(['curl','-k','-F',"request={'timezone':'America/New_York', 'lang':'en'};type=application/json", '-F',"voiceData=@/tmp/cleanedtest.wav;type=audio/wav",'-H',"Authorization: Bearer d1e8a81177b64dae88326f80c2fa73d0",'-H',"ocp-apim-subscription-key: c3f08d12-f0cb-4524-b468-1c2226857018","https://api.api.ai/v1/query?v=20150910"])
    api_ai_json_response = json.loads(subp)
    return api_ai_json_response 

# Function that calls the API.AI NLP engine
#    Flag variable contains true or false value 
#        True  -  when search term is available, and needs a api.ai NLP understanding
#        False -  when api.ai voice call was done, NLP was already done.

def api_ai_call(api_ai_json_response,flag):
    hello(" . : : .  Api.ai call in progress  . : : .  ",1,"")
    if flag :
         a = ['curl','-H',"Content-Type: application/json; charset=utf-8",'-H',"Authorization: Bearer d1e8a81177b64dae88326f80c2fa73d0",'-H',"ocp-apim-subscription-key: c3f08d12-f0cb-4524-b468-1c2226857018",'--data']
         b1 = "{'query':'"
         b2 = "', 'lang':'en', 'contexts':['weather', 'local']}"
         api_ai_json_response = api_ai_json_response.replace("'","")
         api_ai_json_response = api_ai_json_response.replace("\"","")
         b = b1 + str(api_ai_json_response) + b2
         c = "https://api.api.ai/v1/query?v=20150910"
         a.append(b)
         a.append(c)
         sub_response = subprocess.check_output(a)
         api_ai_json_response = json.loads(sub_response)
    reply =""
    print "\n api_ai_json_response : " + str(api_ai_json_response)
    searched_term = api_ai_json_response["result"]["resolvedQuery"]
    searched_term = searched_term.decode('utf8')
    print searched_term
    changeColor()    
    hello(searched_term,1,"")
    
    if api_ai_json_response["result"]["source"] == "agent":
        if api_ai_json_response["result"]["metadata"]["intentName"] == "Report Bug":
            reply += api_ai_json_response["result"]["parameters"]["reply"]
            Report_to_admin(str(searched_term),api_ai_response)
        else :
            reply += api_ai_json_response["result"]["parameters"]["reply"]
    else:
        reply += api_ai_json_response["result"]["fulfillment"]["speech"]
        query = api_ai_json_response["result"]["resolvedQuery"]
        changeColor()
        send_to_extension(searched_term,reply,"")
   
    
if  __name__ == '__main__' :
    if len(sys.argv) < 2:
        record()
        if using_google_speech_api:
            voice_text = google_voice_call()
            hello(voice_text,1,"")
            flag = True
        else:
            voice_text = api_ai_voice_call()
            flag = False
    else:
        voice_text = string.join(sys.argv[1:])
        flag = True
    api_ai_call(voice_text,flag)
